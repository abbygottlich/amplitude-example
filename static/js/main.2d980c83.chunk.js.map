{"version":3,"sources":["components/Completed.js","App.js","serviceWorker.js","index.js"],"names":["Completed","styled","p","ShowCompleted","App","onChange","e","setState","inputValue","target","value","onInputFocus","window","amplitude","getInstance","logEvent","type","elementName","elementId","onAdd","eventProperties","userInput","state","list","push","todos","document","getElementById","onComplete","index","splice","completed","setTimeout","showCompleted","className","onClick","this","id","placeholder","map","item","key","React","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"koBAOA,IAAMA,E,KAAYC,EAAOC,EAAV,KAoBAC,EAxBf,WACE,OAAO,kBAACH,EAAD,oBC4HMI,E,YA3Hb,aAAe,IAAD,8BACZ,+CAqBFC,SAAW,SAAAC,GACT,EAAKC,SAAS,CACZC,WAAYF,EAAEG,OAAOC,SAxBX,EA4BdC,aAAe,WAObC,OAAOC,UAAUC,cAAcC,SAAS,iBANhB,CACtBC,KAAM,iBACNC,YAAa,cACbC,UAAW,KAhCD,EAsCdC,MAAQ,WACN,IAAMC,EAAkB,CACtBJ,KAAM,gBACNC,YAAa,aACbC,UAAW,EACXG,UAAW,EAAKC,MAAMd,YAExBI,OAAOC,UAAUC,cAAcC,SAAS,gBAAiBK,GACrD,EAAKE,MAAMd,aACb,EAAKe,KAAKC,KAAK,EAAKF,MAAMd,YAC1B,EAAKD,SAAS,CACZkB,MAAO,EAAKF,KACZf,WAAY,OAEdkB,SAASC,eAAe,QAAQjB,MAAQ,OApD9B,EAwDdkB,WAAa,SAAAC,GACIjB,OAAOC,UAYfC,cAAcC,SAAS,sBAE9B,EAAKO,MAAMG,MAAMK,OAAOD,EAAO,GAC/B,EAAKtB,SAAS,CACZkB,MAAO,EAAKH,MAAMG,MAClBM,WAAW,IAEbC,YAAW,WACT,EAAKzB,SAAS,CAAEwB,WAAW,MAC1B,OA9ES,EAiFdE,cAAgB,WACd,GAAI,EAAKX,MAAMS,UACb,OAAO,kBAAC,EAAD,OAhFT,EAAKT,MAAQ,CACXG,MAAO,GACPjB,WAAY,KACZuB,WAAW,GAGb,EAAKR,KAAO,GATA,E,iFAmBZX,OAAOC,UAAUC,cAAcC,SAAS,gBANhB,CACtBC,KAAM,YACNC,YAAa,YACbC,UAAW,M,+BAuEL,IAAD,OACP,OACE,6BACE,0CACA,yBAAKgB,UAAU,qBACb,2BACEC,QAASC,KAAKzB,aACdN,SAAU+B,KAAK/B,SACfgC,GAAG,OACHC,YAAY,aAEd,4BAAQH,QAASC,KAAKjB,MAAOkB,GAAG,WAAhC,QAIF,4BACGD,KAAKd,MAAMG,MAAMc,KAAI,SAACC,EAAMX,GAC3B,OACE,yBAAKY,IAAKZ,EAAOK,UAAU,qBACzB,4BACEG,GAAG,eACHF,QAAS,WACP,EAAKP,WAAWC,MAGpB,4BAAKW,QAKZJ,KAAKH,qB,GAtHIS,IAAMC,WCQJC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvB,SAASC,eAAe,SD6H3C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d980c83.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nfunction ShowCompleted() {\n  return <Completed>Completed!</Completed>;\n}\n\nconst Completed = styled.p`\n  color: #aa0000;\n  font-family: \"Helvetica\";\n  font-size: 36px;\n  text-align: center;\n  animation: fadeOut ease 3s;\n\n  @keyframes fadeOut {\n    0% {\n      opacity: 1;\n    }\n    90% {\n      opacity: 0;\n    }\n    100% {\n      display: none;\n    }\n  }\n`;\n\nexport default ShowCompleted;\n","import React from \"react\";\nimport \"./App.scss\";\nimport ShowCompleted from \"./components/Completed\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      todos: [],\n      inputValue: null,\n      completed: false\n    };\n\n    this.list = [];\n  }\n\n  componentDidMount() {\n    const eventProperties = {\n      type: \"Page Load\",\n      elementName: \"Home Page\",\n      elementId: 1\n    };\n\n    window.amplitude.getInstance().logEvent(\"view homepage\", eventProperties);\n  }\n\n  onChange = e => {\n    this.setState({\n      inputValue: e.target.value\n    });\n  };\n\n  onInputFocus = () => {\n    const eventProperties = {\n      type: \"Element Change\",\n      elementName: \"Input Field\",\n      elementId: 2\n    };\n\n    window.amplitude.getInstance().logEvent(\"add user input\", eventProperties);\n  };\n\n  onAdd = () => {\n    const eventProperties = {\n      type: \"Element Click\",\n      elementName: \"Add Button\",\n      elementId: 3,\n      userInput: this.state.inputValue\n    };\n    window.amplitude.getInstance().logEvent(\"click add btn\", eventProperties);\n    if (this.state.inputValue) {\n      this.list.push(this.state.inputValue);\n      this.setState({\n        todos: this.list,\n        inputValue: null\n      });\n      document.getElementById(\"todo\").value = null;\n    }\n  };\n\n  onComplete = index => {\n    const ampVar = window.amplitude;\n    // const setUserProp = window.setUserProp;\n    // const logEvent = window.logEvent;\n    // const completeBtn = document.getElementById(\"complete-btn\");\n\n    // const eventProperties = {\n    //   type: \"click complete btn\"\n    // };\n    // ampVar.getInstance().logEvent(`click complete btn`, eventProperties);\n\n    // const completeButton = new ampVar.Identify().set(\"complete button\", \"1\");\n    // ampVar.getInstance().setUserProp(completeButton);\n    ampVar.getInstance().logEvent(\"click complete btn\");\n\n    this.state.todos.splice(index, 1);\n    this.setState({\n      todos: this.state.todos,\n      completed: true\n    });\n    setTimeout(() => {\n      this.setState({ completed: false });\n    }, 2500);\n  };\n\n  showCompleted = () => {\n    if (this.state.completed) {\n      return <ShowCompleted />;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>To Do List</h1>\n        <div className=\"input-add-wrapper\">\n          <input\n            onClick={this.onInputFocus}\n            onChange={this.onChange}\n            id=\"todo\"\n            placeholder=\"To do...\"\n          ></input>\n          <button onClick={this.onAdd} id=\"add-btn\">\n            Add\n          </button>\n        </div>\n        <ul>\n          {this.state.todos.map((item, index) => {\n            return (\n              <div key={index} className=\"list-item-wrapper\">\n                <button\n                  id=\"complete-btn\"\n                  onClick={() => {\n                    this.onComplete(index);\n                  }}\n                ></button>\n                <li>{item}</li>\n              </div>\n            );\n          })}\n        </ul>\n        {this.showCompleted()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}